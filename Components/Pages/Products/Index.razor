@page "/products"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Context

<h1>Products</h1>

<a href="/products/create" class="btn btn-info">Create</a>

@if (!Products.Any())
{
    <p>Loading Products ...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>
                        <a href="/products/@product.Id">@product.Title</a>
                    </td>
                    <td>@product.Category.Title</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>
                        <a href="/products/edit/@product.Id" class="btn btn-primary">EDIT</a>
                        <a href="/products/delete/@product.Id" class="btn btn-danger">DELETE</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public IEnumerable<Product> Products { get; set; } = Enumerable.Empty<Product>();
    protected override async Task OnInitializedAsync()
    {
        Products = await Context.Products
        .AsNoTracking()
        .Include(x => x.Category)
        .ToListAsync();
    }

}
